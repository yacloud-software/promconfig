// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/promconfig/promconfig.proto
// DO NOT EDIT!

/*
Package promconfig is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/promconfig/promconfig.proto

It has these top-level messages:
	Target
	Reporter
	TargetList
	PercentAlert
	SeriesMatch
	Series
	SeriesList
*/
package promconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AlertEffects int32

const (
	AlertEffects_NOBODY AlertEffects = 0
	AlertEffects_USERS  AlertEffects = 1
	AlertEffects_SYSOP  AlertEffects = 2
)

var AlertEffects_name = map[int32]string{
	0: "NOBODY",
	1: "USERS",
	2: "SYSOP",
}
var AlertEffects_value = map[string]int32{
	"NOBODY": 0,
	"USERS":  1,
	"SYSOP":  2,
}

func (x AlertEffects) String() string {
	return proto.EnumName(AlertEffects_name, int32(x))
}
func (AlertEffects) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Target struct {
	Name      string    `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Addresses []string  `protobuf:"bytes,2,rep,name=Addresses" json:"Addresses,omitempty"`
	Reporter  *Reporter `protobuf:"bytes,3,opt,name=Reporter" json:"Reporter,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Target) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Target) GetReporter() *Reporter {
	if m != nil {
		return m.Reporter
	}
	return nil
}

type Reporter struct {
	Reporter string `protobuf:"bytes,1,opt,name=Reporter" json:"Reporter,omitempty"`
}

func (m *Reporter) Reset()                    { *m = Reporter{} }
func (m *Reporter) String() string            { return proto.CompactTextString(m) }
func (*Reporter) ProtoMessage()               {}
func (*Reporter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reporter) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

type TargetList struct {
	Reporter *Reporter `protobuf:"bytes,1,opt,name=Reporter" json:"Reporter,omitempty"`
	Targets  []*Target `protobuf:"bytes,2,rep,name=Targets" json:"Targets,omitempty"`
}

func (m *TargetList) Reset()                    { *m = TargetList{} }
func (m *TargetList) String() string            { return proto.CompactTextString(m) }
func (*TargetList) ProtoMessage()               {}
func (*TargetList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TargetList) GetReporter() *Reporter {
	if m != nil {
		return m.Reporter
	}
	return nil
}

func (m *TargetList) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

type PercentAlert struct {
	ID          uint64       `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	TotalMetric string       `protobuf:"bytes,2,opt,name=TotalMetric" json:"TotalMetric,omitempty"`
	CountMetric string       `protobuf:"bytes,3,opt,name=CountMetric" json:"CountMetric,omitempty"`
	Effects     AlertEffects `protobuf:"varint,4,opt,name=Effects,enum=promconfig.AlertEffects" json:"Effects,omitempty"`
}

func (m *PercentAlert) Reset()                    { *m = PercentAlert{} }
func (m *PercentAlert) String() string            { return proto.CompactTextString(m) }
func (*PercentAlert) ProtoMessage()               {}
func (*PercentAlert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PercentAlert) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PercentAlert) GetTotalMetric() string {
	if m != nil {
		return m.TotalMetric
	}
	return ""
}

func (m *PercentAlert) GetCountMetric() string {
	if m != nil {
		return m.CountMetric
	}
	return ""
}

func (m *PercentAlert) GetEffects() AlertEffects {
	if m != nil {
		return m.Effects
	}
	return AlertEffects_NOBODY
}

type SeriesMatch struct {
	Prefix       []string `protobuf:"bytes,1,rep,name=Prefix" json:"Prefix,omitempty"`
	PartialMatch bool     `protobuf:"varint,2,opt,name=PartialMatch" json:"PartialMatch,omitempty"`
}

func (m *SeriesMatch) Reset()                    { *m = SeriesMatch{} }
func (m *SeriesMatch) String() string            { return proto.CompactTextString(m) }
func (*SeriesMatch) ProtoMessage()               {}
func (*SeriesMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SeriesMatch) GetPrefix() []string {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SeriesMatch) GetPartialMatch() bool {
	if m != nil {
		return m.PartialMatch
	}
	return false
}

type Series struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *Series) Reset()                    { *m = Series{} }
func (m *Series) String() string            { return proto.CompactTextString(m) }
func (*Series) ProtoMessage()               {}
func (*Series) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Series) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SeriesList struct {
	Series []*Series `protobuf:"bytes,1,rep,name=Series" json:"Series,omitempty"`
}

func (m *SeriesList) Reset()                    { *m = SeriesList{} }
func (m *SeriesList) String() string            { return proto.CompactTextString(m) }
func (*SeriesList) ProtoMessage()               {}
func (*SeriesList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SeriesList) GetSeries() []*Series {
	if m != nil {
		return m.Series
	}
	return nil
}

func init() {
	proto.RegisterType((*Target)(nil), "promconfig.Target")
	proto.RegisterType((*Reporter)(nil), "promconfig.Reporter")
	proto.RegisterType((*TargetList)(nil), "promconfig.TargetList")
	proto.RegisterType((*PercentAlert)(nil), "promconfig.PercentAlert")
	proto.RegisterType((*SeriesMatch)(nil), "promconfig.SeriesMatch")
	proto.RegisterType((*Series)(nil), "promconfig.Series")
	proto.RegisterType((*SeriesList)(nil), "promconfig.SeriesList")
	proto.RegisterEnum("promconfig.AlertEffects", AlertEffects_name, AlertEffects_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PromConfigService service

type PromConfigServiceClient interface {
	// call this when we want to replace a bunch of new targets
	NewTargets(ctx context.Context, in *TargetList, opts ...grpc.CallOption) (*common.Void, error)
	// find series by partial name match
	FindSeries(ctx context.Context, in *SeriesMatch, opts ...grpc.CallOption) (*SeriesList, error)
	// get a list of all metrics
	GetSeries(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SeriesList, error)
}

type promConfigServiceClient struct {
	cc *grpc.ClientConn
}

func NewPromConfigServiceClient(cc *grpc.ClientConn) PromConfigServiceClient {
	return &promConfigServiceClient{cc}
}

func (c *promConfigServiceClient) NewTargets(ctx context.Context, in *TargetList, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/promconfig.PromConfigService/NewTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promConfigServiceClient) FindSeries(ctx context.Context, in *SeriesMatch, opts ...grpc.CallOption) (*SeriesList, error) {
	out := new(SeriesList)
	err := grpc.Invoke(ctx, "/promconfig.PromConfigService/FindSeries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promConfigServiceClient) GetSeries(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SeriesList, error) {
	out := new(SeriesList)
	err := grpc.Invoke(ctx, "/promconfig.PromConfigService/GetSeries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PromConfigService service

type PromConfigServiceServer interface {
	// call this when we want to replace a bunch of new targets
	NewTargets(context.Context, *TargetList) (*common.Void, error)
	// find series by partial name match
	FindSeries(context.Context, *SeriesMatch) (*SeriesList, error)
	// get a list of all metrics
	GetSeries(context.Context, *common.Void) (*SeriesList, error)
}

func RegisterPromConfigServiceServer(s *grpc.Server, srv PromConfigServiceServer) {
	s.RegisterService(&_PromConfigService_serviceDesc, srv)
}

func _PromConfigService_NewTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromConfigServiceServer).NewTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promconfig.PromConfigService/NewTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromConfigServiceServer).NewTargets(ctx, req.(*TargetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromConfigService_FindSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromConfigServiceServer).FindSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promconfig.PromConfigService/FindSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromConfigServiceServer).FindSeries(ctx, req.(*SeriesMatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromConfigService_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromConfigServiceServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/promconfig.PromConfigService/GetSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromConfigServiceServer).GetSeries(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _PromConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "promconfig.PromConfigService",
	HandlerType: (*PromConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTargets",
			Handler:    _PromConfigService_NewTargets_Handler,
		},
		{
			MethodName: "FindSeries",
			Handler:    _PromConfigService_FindSeries_Handler,
		},
		{
			MethodName: "GetSeries",
			Handler:    _PromConfigService_GetSeries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/golang.conradwood.net/apis/promconfig/promconfig.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/promconfig/promconfig.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xfd, 0x9c, 0xe4, 0x73, 0x9b, 0x49, 0x54, 0x85, 0x15, 0x0a, 0x26, 0xea, 0x21, 0xb2, 0x04,
	0x44, 0x15, 0x72, 0x8a, 0x7b, 0xe1, 0x52, 0xa4, 0xa6, 0x29, 0x28, 0x12, 0x4d, 0xa2, 0x75, 0x41,
	0xea, 0xd1, 0xd8, 0x93, 0xb0, 0x92, 0xbd, 0x1b, 0xad, 0xb7, 0x94, 0x33, 0x3f, 0x83, 0x23, 0xff,
	0x82, 0x7f, 0x87, 0xb2, 0xbb, 0x21, 0x1b, 0x02, 0x88, 0x53, 0x26, 0x33, 0xef, 0xcd, 0x7b, 0xb3,
	0xe3, 0x81, 0xf3, 0x95, 0x14, 0x4a, 0x54, 0xc3, 0xa5, 0x28, 0x52, 0xbe, 0x8c, 0x32, 0xc1, 0x65,
	0x9a, 0xdf, 0x0b, 0x91, 0x47, 0x1c, 0xd5, 0x30, 0x5d, 0xb1, 0x6a, 0xb8, 0x92, 0xa2, 0xcc, 0x04,
	0x5f, 0xb0, 0xa5, 0x13, 0x46, 0x9a, 0x47, 0x60, 0x9b, 0xe9, 0x45, 0x7f, 0xe9, 0x91, 0x89, 0xb2,
	0x14, 0xdc, 0xfe, 0x18, 0x6e, 0x58, 0x80, 0x7f, 0x93, 0xca, 0x25, 0x2a, 0x42, 0xa0, 0x31, 0x4d,
	0x4b, 0x0c, 0xbc, 0xbe, 0x37, 0x68, 0x52, 0x1d, 0x93, 0x63, 0x68, 0x5e, 0xe4, 0xb9, 0xc4, 0xaa,
	0xc2, 0x2a, 0xa8, 0xf5, 0xeb, 0x83, 0x26, 0xdd, 0x26, 0xc8, 0x29, 0x1c, 0x52, 0x5c, 0x09, 0xa9,
	0x50, 0x06, 0xf5, 0xbe, 0x37, 0x68, 0xc5, 0x0f, 0x23, 0xc7, 0xdc, 0xa6, 0x46, 0x7f, 0xa2, 0xc2,
	0xa7, 0x5b, 0x06, 0xe9, 0x39, 0x6c, 0xa3, 0xb9, 0xc5, 0x15, 0x00, 0xc6, 0xd5, 0x5b, 0x56, 0xa9,
	0x1d, 0x1d, 0xef, 0x5f, 0x74, 0xc8, 0x73, 0x38, 0x30, 0x7c, 0xe3, 0xba, 0x15, 0x13, 0x97, 0x60,
	0x4a, 0x74, 0x03, 0x09, 0xbf, 0x79, 0xd0, 0x9e, 0xa3, 0xcc, 0x90, 0xab, 0x8b, 0x02, 0xa5, 0x22,
	0x47, 0x50, 0x9b, 0x8c, 0xb5, 0x54, 0x83, 0xd6, 0x26, 0x63, 0xd2, 0x87, 0xd6, 0x8d, 0x50, 0x69,
	0x71, 0x8d, 0x4a, 0xb2, 0x2c, 0xa8, 0x69, 0xb7, 0x6e, 0x6a, 0x8d, 0xb8, 0x14, 0x77, 0x5c, 0x59,
	0x44, 0xdd, 0x20, 0x9c, 0x14, 0x79, 0x05, 0x07, 0x57, 0x8b, 0x05, 0x66, 0xaa, 0x0a, 0x1a, 0x7d,
	0x6f, 0x70, 0x14, 0x07, 0xae, 0x25, 0xad, 0x6b, 0xeb, 0x23, 0xf8, 0xfa, 0xe5, 0xb1, 0x7f, 0xc7,
	0xb8, 0x3a, 0x8b, 0xe9, 0x86, 0x14, 0x4e, 0xa0, 0x95, 0xa0, 0x64, 0x58, 0x5d, 0xa7, 0x2a, 0xfb,
	0x48, 0xba, 0xe0, 0xcf, 0x25, 0x2e, 0xd8, 0xe7, 0xc0, 0xd3, 0x6b, 0xb1, 0xff, 0x48, 0x08, 0xed,
	0x79, 0x2a, 0x15, 0x4b, 0x0b, 0x8d, 0xd3, 0x5e, 0x0f, 0xe9, 0x4e, 0x2e, 0x3c, 0x06, 0xdf, 0xb4,
	0xfa, 0xdd, 0xce, 0xc3, 0x97, 0x00, 0xa6, 0xaa, 0xdf, 0xfe, 0x64, 0x83, 0xd5, 0x3a, 0xbf, 0x3c,
	0xa4, 0xa9, 0x50, 0x8b, 0x38, 0x39, 0x85, 0xb6, 0x3b, 0x07, 0x01, 0xf0, 0xa7, 0xb3, 0xd1, 0x6c,
	0x7c, 0xdb, 0xf9, 0x8f, 0x34, 0xe1, 0xff, 0x77, 0xc9, 0x15, 0x4d, 0x3a, 0xde, 0x3a, 0x4c, 0x6e,
	0x93, 0xd9, 0xbc, 0x53, 0x8b, 0xbf, 0x7b, 0xf0, 0x60, 0x2e, 0x45, 0x79, 0xa9, 0xfb, 0x25, 0x28,
	0x3f, 0xb1, 0x0c, 0x49, 0x0c, 0x30, 0xc5, 0x7b, 0xbb, 0x1d, 0xd2, 0xdd, 0x5f, 0xdd, 0xda, 0x59,
	0xaf, 0x1d, 0xd9, 0x0f, 0xf9, 0xbd, 0x60, 0x39, 0x39, 0x07, 0x78, 0xcd, 0x78, 0x6e, 0xe7, 0x7a,
	0xb4, 0xef, 0x52, 0x8f, 0xde, 0xeb, 0xee, 0x17, 0xf4, 0x98, 0x2f, 0xa0, 0xf9, 0x06, 0x95, 0x65,
	0xef, 0x74, 0xfe, 0x13, 0x65, 0xf4, 0x0c, 0x9e, 0x70, 0x54, 0xee, 0xa1, 0xd9, 0xd3, 0x5b, 0xdf,
	0x9a, 0xc3, 0xf9, 0xe0, 0xeb, 0x4b, 0x3b, 0xfb, 0x11, 0x00, 0x00, 0xff, 0xff, 0x00, 0x5b, 0x04,
	0x08, 0xe6, 0x03, 0x00, 0x00,
}
