
syntax = "proto3";

package promconfig;
option go_package = "golang.conradwood.net/apis/promconfig";
option java_package = "net.conradwood.golang.apis.promconfig";
import "golang.conradwood.net/apis/common/common.proto";
import "golang.conradwood.net/apis/htmlserver/htmlserver.proto";

message Target {
  string Name = 1;               // servicename
  repeated string Addresses = 2; // host:port
  Reporter Reporter = 3;         // who reported it?
  EmbeddedTargetConfig TargetConfig=4;
}
message EmbeddedTargetConfig {
  bool HTTPOnly=1; // default: 'https'
  string MetricsPath=2; // default: "/internal/serveice-info/metrics"
}
message Reporter {
  string Reporter = 1; // who reports this (e.g. registry)
}
message TargetList {
  Reporter Reporter = 1;
  repeated Target Targets = 2;
}

enum AlertEffects {
  NOBODY=0;
  USERS=1;
  SYSOP=2;
}

message PercentAlert {
  uint64 ID=1;
  string TotalMetric=2; // the metric for 'total', e.g. "TotalPing"
  string CountMetric=3;  // the metric for alerting, e.g. "PingFailures"
  AlertEffects Effects=4 [(common.sql_type)="uint32"];
}

message SeriesMatch {
  repeated string Prefix=1;
  bool PartialMatch=2;
}
message Series {
  string Name=1;
}
message SeriesList {
  repeated Series Series=1;
}
message PercentAlertList {
  repeated PercentAlert Alerts=1;
}

message Config {
  repeated TargetConfig Configs=1;
}
message TargetConfig {
  string ServiceName=1;
  uint32 SampleLimit=2;
}
service PromConfigService {
  // query registry for new targets
  rpc QueryForTargets(Reporter) returns (TargetList);
  // submit new targes, call this when we want to replace a bunch of new targets
  rpc NewTargets(TargetList) returns (common.Void);
  // find series by partial name match
  rpc FindSeries(SeriesMatch) returns (SeriesList);
  // get a list of all metrics
  rpc GetSeries(common.Void) returns (SeriesList);
  // save or create a simple percentage-based alert. If ID is set it will overwrite existing one
  rpc UpdatePercentageAlert(PercentAlert) returns (PercentAlert);
  // get all percentage alert
  rpc GetAllPercentageAlerts(common.Void) returns (PercentAlertList);
  // renderer/editor
  rpc HTMLRenderer(htmlserver.SnippetRequest) returns (htmlserver.SnippetResponse);
  // requery
  rpc Requery(common.Void) returns (common.Void);
}
